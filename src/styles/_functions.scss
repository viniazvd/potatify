@function color($color, $opacity){
  // @warn map-get($palettes, $color);

  @if map-has-key($palettes, $color){
    $color: map-get($palettes, $color);

      @if map-has-key($color, $opacity){
        $opacity: map-get($color, $opacity);

        @return $opacity;
      }

      @warn "unknown opacity `#{$opacity}` in color";
      @return null;
  }

  @warn "unknown color `#{$color}` in palette";
  @return null;
}

@function dark($variable, $opacity) {
  @return unquote('linear-gradient(to top, rgba(0, 0, 0, #{$opacity}), rgba(0, 0, 0, #{$opacity})), #{$variable} !important');
}

@function light($variable, $opacity) {
  @return unquote('linear-gradient(to top, rgba(255, 255, 255, #{$opacity}), rgba(255, 255, 255, #{$opacity})), #{$variable} !important');
}

@function getRGB($r, $g, $b){
  @return unquote('rgb(#{$r}, #{$g}, #{$b}) !important');
}

@function generateColor($r, $g, $b, $opacity, $type) {

  $alpha: calc($opacity/100);
  $color: 0;

  @if($type=='D'){
    $color: 0;
  }
  @if($type=='L'){
    $color: 255;
  }

  @return unquote('rgb('+
    'calc(calc((calc(1 - #{$alpha})) * #{$r}) + calc(#{$alpha} * #{$color})), '+
    'calc(calc((calc(1 - #{$alpha})) * #{$g}) + calc(#{$alpha} * #{$color})), '+
    'calc(calc((calc(1 - #{$alpha})) * #{$b}) + calc(#{$alpha} * #{$color})) ) !important'
  );

  // @return unquote('rgb('+
  //       ((1 - $alpha) * $r + $alpha * $color,
  //       (1 - $alpha) * $g + $alpha * $color,
  //       (1 - $alpha) * $b + $alpha * $color)
  //       +')'
  // );
}
